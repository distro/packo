#! /usr/bin/env ruby
# encoding: utf-8
#--
# Copyleft meh. [http://meh.doesntexist.org | meh@paranoici.org]
#
# This file is part of packo.
#
# packo is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# packo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with packo. If not, see <http://www.gnu.org/licenses/>.
#++

require 'optitron'
require 'open-uri'
require 'digest/sha1'
require 'find'

require 'packo'
require 'packo/binary'
require 'packo/rbuild/modules/packaging'

class Application < Optitron::CLI
  include Packo
  include Binary::Helpers
  include Models

  desc 'Outputs version'
  def version
    puts "packÃ¸ #{VERSION}"
  end

  desc 'Installs packages'
  opt 'destination', 'Set the destination where to install the package', :default => '/', :short_name => 'd'
  opt 'inherit', 'Apply the passed flags to the eventual dependencies', :type => :boolean, :default => false
  opt 'force', 'Force installation when something minor goes wrong', :type => :boolean, :default => false
  opt 'nodeps', 'Ignore blockers and dependencies', :type => :boolean, :default => false
  opt 'repository', 'Set a specific repository', :type => :string, :short_name => 'r'
  def install (*name)
    outside = params['destination'] != '/'

    FileUtils.mkpath params['destination'] rescue nil
    FileUtils.mkpath Environment[:SELECTOR_MODULES] rescue nil

    binary = false

    if name.last === true
      manual = name.shift ? 0 : 1
    else
      manual = 1
    end

    name.each {|name|
      if File.extname(name).empty?
        packages = nil
  
        if Environment.new[:FLAVOR].include?('binary')
          packages = _search(name, params['repository'], :binary)
  
          if packages.empty?
            warn "#{name} could not be found in the binary repositories, looking in source repositories"
            packages = nil
          else
            binary = true
          end
        end
  
        begin
          if !packages
            packages = _search(name, params['repository'], :source)
  
            binary = false
          end
  
          names = packages.group_by {|package|
            "#{package.tags}/#{package.name}"
          }.map {|(name, package)| name}.uniq
  
          if names.length > 1
            fatal "More than one package matches: #{name}"
            names.each {|name|
              puts "    #{name}"
            }
          
            exit 10
          end
  
          package = packages.sort {|a, b|
            a.version <=> b.version
          }.last
  
          if !package
            fatal "#{name} not found"
            exit! 11
          end
  
          env = Environment.new(package)
  
          _filter(package, env)
  
          if package.repository.type == :binary && !_has(package, env)
            warn 'The binary package is not available with the features you asked for, trying to build from source'
            packages = nil
            raise ArgumentError
          end
        rescue ArgumentError
          retry
        end
  
        case package.repository.type
          when :binary
            name = "#{package.tags.to_s(true)}/#{package.name}-#{package.version}"
  
            flavor = ''
            env[:FLAVOR].split(/\s+/).reject {|f| f == 'binary'}.each {|f|
              flavor << ".#{f}"
            }
            flavor[0, 1] = ''
  
            features = ''
            env[:FEATURES].split(/\s+/).each {|f|
              features << "-#{f}"
            }
            features[0, 1] = ''
  
            name << "%#{package.slot}"
            name << "+#{flavor}"
            name << "-#{features}"
            name << ".pko"
  
            FileUtils.mkpath(File.dirname("#{env[:TMP]}/#{name}")) rescue nil
  
            begin
              Packo.sh 'wget', '-c', '-O', "#{env[:TMP]}/#{name}", "#{_uri(package.repository)}/#{name}"
            rescue RuntimeError
              FileUtils.rm "#{env[:TMP]}/#{name}"
              fatal "Failed to download #{name}"
              exit! 12
            end
  
            name = "#{env[:TMP]}/#{name}"
  
            if (digest = _digest(package, env)) && (result = Digest::SHA1.hexdigest(File.read(name))) != digest
              fatal "Digest mismatch (got #{result} expected #{digest}), install this package from source, the mirror could be compromised"
              exit! 13
            end
  
            path = "#{env[:TMP]}/.__packo_unpacked/#{name[env[:TMP].length, name.length]}"
  
          when :source
            name = _build(package, env)

            if !name
              fatal "Something went wrong while trying to build #{package.to_s(:whole)}"
              exit! 14
            end

            path = "#{env[:TMP]}/.__packo_unpacked/#{package.tags.to_s(true)}/#{name[env[:TMP].length + '.__packo_build/'.length, name.length]}"
        end
      else
        env  = Environment.new
        path = "#{env[:TMP]}/.__packo_unpacked/#{File.basename(name)}"
      end

      FileUtils.rm_rf path, :secure => true

      case File.extname(name)
        when '.pko'
          RBuild::Modules::Packaging::PKO.unpack(File.realpath(name), path)

          manifest = RBuild::Package::Manifest.open("#{path}/manifest.xml")

        else
          fatal 'Unknown package type'
          exit! 15
      end

      if !params['inherit']
        Environment[:FLAVOR] = Environment[:FEATURES] = ''
      end

      if !params['nodeps']
        manifest.blockers {|blocker|
          if (blocker.runtime? || !binary) && _installed?(blocker)
            fatal "#{blocker} can't be installed with #{package}"
            exit! 16
          end
        }

        manifest.dependencies.each {|dependency|
          install(dependency.to_s) if dependency.runtime? || !binary
        }
      end

      ap manifest.package.tags.class
      exit! 0

      manifest.selectors.each {|selector|
        FileUtils.cp_r "#{path}/selectors/#{selector.path}", env[:SELECTOR_MODULES], :preserve => true, :remove_destination => true
        Packo.sh 'packo-select', 'add', selector.name, selector.description, "#{env[:SELECTOR_MODULES]}/#{selector.path}", :silent => true
      }

      pkg = InstalledPackage.first_or_create(
        :tags_hashed => manifest.package.tags.hashed,
        :name        => manifest.package.name,
        :version     => manifest.package.version,
        :slot        => manifest.package.slot
      )

      pkg.update(
        :repo => params['repository'],

        :revision => manifest.package.revision,

        :flavor   => manifest.package.flavors.join(' '),
        :features => manifest.package.features.join(' '),
        
        :manual  => manual,
        :runtime => true
      )

      manifest.package.tags.each {|tag|
        pkg.tags.first_or_create(:name => tag.to_s)
      }

      length = "#{path}/dist".length
      old    = path

      begin
        Find.find("#{path}/dist") {|file|
          type = nil
          path = "#{params['destination']}/#{file[length, file.length]}".gsub(%r{/*/}, '/').sub(%r{/$}, '')
          fake = path[params['destination'].length, path.length] || ''
          meta = nil

          if !outside && tmp = _exists?(fake) && !params['force']
            fatal "#{path} belongs to #{tmp}, use --force to force overwrite"
            raise RuntimeError.new 'File collision'
          end
  
          if File.directory? file
            type = :dir
            FileUtils.mkpath path rescue nil
          elsif File.symlink? file
            type = :sym
            meta = File.readlink file

            FileUtils.rm_f path
            File.symlink meta, path
          elsif File.file? file
            type = :obj
            meta = Digest::SHA1.hexdigest(File.read(file))
            FileUtils.cp file, path, :preserve => true
          else
            next
          end

          case type
            when :dir; puts "--- #{path}/"
            when :sym; puts colorize(">>> #{path} -> #{meta}", :BLUE, :DEFAULT, :BOLD)
            when :obj; puts colorize(">>> #{path}", :DEFAULT, :DEFAULT, :BOLD)
          end

          if params['force']
            InstalledPackage::Content.first(:path => fake).destroy rescue nil
          end

          content = pkg.contents.first_or_create(
            :type => type,
            :path => fake
          )

          content.update(
            :meta => meta
          )
        }
      rescue Exception => e
        fatal 'Something went deeply wrong while installing package contents'
        Packo.debug e, :force => true

        pkg.destroy rescue nil

        Find.find("#{old}/dist") {|file|
          RBuild::Do.rm "#{params['destination']}/#{file[length, file.length]}".gsub(%r{/*/}, '/').sub(%r{/$}, '')
        }

        exit! 17
      end

      if outside && !params['force']
        pkg.destroy
      end
    }
  end

  desc 'Uninstalls packages'
  opt 'destination', 'Set the destination where to install the package', :default => '/', :short_name => 'd'
  def uninstall (*name)
    name.each {|name|
      packages = _search_installed(name)
      
      if packages.empty?
        fatal "No installed packages match #{name}"
        exit! 20
      end

      packages.each {|installed|
        installed.model.contents(:type.desc).each {|content|
          path = "#{params['destination']}/#{content.path}".gsub(%r{/*/}, '/')

          case content.type
            when :obj
              puts colorize("<<< #{path}", :DEFAULT, :DEFAULT, :BOLD)
              FileUtils.rm_f(path)

            when :sym
              puts colorize("<<< #{path} -> #{meta}", :BLUE, :DEFAULT, :BOLD)
              FileUtils.rm_f(path)

            when :dir
              puts "--- #{path}/"
              Dir.delete(path) rescue nil
          end
        }

        installed.model.destroy
      }
    }
  end

  desc 'Searches through installed packages'
  opt 'type', 'The repository type', :type => :string, :in => ['source', 'binary', 'all'], :default => 'all', :short_name => 't'
  opt 'repository', 'Set a specific repository', :type => :string, :short_name => 'r'
  def search (expression='')
    _search_installed(expression, params['repository'], params['type']).each {|package|
      print "#{package.tags}/#{colorize(package.name, :DEFAULT, :DEFAULT, :BOLD)}"
      print "-#{colorize(package.version, :RED)}"
      print "%#{colorize(package.slot, :BLUE, :DEFAULT, :BOLD)}" if package.slot

      print " [#{package.features}]" unless package.features.empty?
      print " {#{package.flavor}}"   unless package.flavor.empty?

      print "\n"
    }
  end

  desc 'Searches through installed packages and returns detailed informations about them'
  opt 'type', 'The repository type', :type => :string, :in => ['source', 'binary', 'all'], :default => 'all', :short_name => 't'
  opt 'repository', 'Set a specific repository', :type => :string, :short_name => 'r'
  def info (expression='')
    _search_installed(expression, params['repository'], params['type']).map {|package|
      _search(package.to_s(:whole), package.repository.name, package.repository.type).first
    }.compact.each {|package|
      print "[#{colorize("source/#{package.repository.name}", :BLACK, :DEFAULT, :BOLD)}] "
      print colorize(package.name, :DEFAULT, :DEFAULT, :BOLD)
      print "-#{colorize(package.version, :RED)}"
      print " (#{colorize(package.slot, :BLUE, :DEFAULT, :BOLD)})" if package.slot
      print " [#{colorize(package.tags.join(' '), :MAGENTA)}]"
      print "\n"

      puts "    #{colorize('Description', :GREEN)}: #{package.description}"
      puts "    #{colorize('Homepage', :GREEN)}:    #{package.homepage}"
      puts "    #{colorize('License', :GREEN)}:     #{package.license}"
      puts "    #{colorize('Maintainer', :GREEN)}:  #{package.model.maintainer || 'nobody'}"

      case package.repository.type
        when :binary
          puts "    #{colorize('Features', :GREEN)}:    #{package.features.to_a.select {|f| f.enabled?}.map {|f| f.name}.join(' ')}"

          print "    #{colorize('Builds', :GREEN)}:      "
          package.model.data.builds.each {|build|
            print 'With '

            if !build.features.empty?
              print colorize(build.features, :DEFAULT, :DEFAULT, :BOLD)
            else
              print 'nothing'
            end

            print " in #{colorize(build.flavor, :DEFAULT, :DEFAULT, :BOLD)} flavor" if build.flavor
            print colorize(" (SHA1 #{build.digest})", :BLACK, :DEFAULT, :BOLD) if build.digest
            print "\n                 "
          }

        when :source
          print "    #{colorize('Features', :GREEN)}:    "

          features = package.model.data.features
          length   = features.map {|feature| feature.name.length}.max

          features.each {|feature|
            if feature.enabled
              print "#{colorize(feature.name, :WHITE, :DEFAULT, :BOLD)}#{Environment[:NO_COLORS] ? '!' : ''}"
            else
              print colorize(feature.name, :BLACK, :DEFAULT, :BOLD)
            end

            print "#{' ' * (4 + length - feature.name.length + (Environment[:NO_COLORS] && !feature.enabled ? 1 : 0))}#{feature.description || '...'}"

            print "\n                 "
          }
      end

      print "\n"
    }
  end

  desc 'Manages various informations about package contents'
  def files (*argument)
    cmd = 'packo-files'

    argument.compact.each {|arg|
      cmd << %Q{ "#{arg}"}
    }

    exit! system(cmd)
  end

  desc 'Manages packÃ¸ building system'
  def build (*argument)
    cmd = 'sandbox packo-build'

    argument.compact.each {|arg|
      cmd << %Q{ '"#{arg}"'}
    }

    exit! system(cmd)
  end

  desc 'Manages various configurations'
  def select (*argument)
    cmd = 'packo-select'

    argument.compact.each {|arg|
      cmd << %Q{ "#{arg}"}
    }

    exit! system(cmd)
  end

  desc 'Manages packÃ¸ repositories'
  def repository (*argument)
    cmd = 'sandbox packo-repository'

    argument.compact.each {|arg|
      cmd << %Q{ '"#{arg}"'}
    }

    exit! system(cmd)
  end

  desc 'Manages packÃ¸ environment'
  def env (*argument)
    cmd = 'packo-env'

    argument.compact.each {|arg|
      cmd << %Q{ "#{arg}"}
    }

    exit! system(cmd)
  end

  private

  def _installed? (package)
    InstalledPackage.first(
      :tags_hashed => package.tags.hashed,
      :name        => package.name,
      :version     => package.version,
      :slot        => package.slot
    )
  end

  def _search_installed (expression, name=nil, type=nil)
    InstalledPackage.search(expression, true, type && name ? "#{type}/#{name}" : nil).map {|pkg|
      Package.wrap(pkg)
    }
  end

  def _search (expression, name=nil, type=nil)
    packages = []

    if name && !name.empty?
      repository      = Package::Repository.parse(name)
      repository.type = type if Package::Repository::Types.member?(type.to_sym)
      repository      = Repository.first(repository.to_h)

      if repository
        packages << repository.search(expression)
      end
    else
      Package::Repository::Types.each {|t|
        if type.nil? || type == 'all' || type == t
          Repository.all(:type => t).each {|repository|
            packages << repository.search(expression)
          }
        end
      }
    end

    return packages.flatten.compact.map {|package|
      Package.wrap(package)
    }
  end

  def _uri (repository)
    Repository.first(Package::Repository.parse(name).to_h).URI rescue nil
  end

  def _build (package, env)
    FileUtils.rm_rf "#{env[:TMP]}/.__packo_build", :secure => true rescue nil
    FileUtils.mkpath "#{env[:TMP]}/.__packo_build" rescue nil

    if !system("sandbox packo-build --output='#{env[:TMP]}/.__packo_build' --repository='#{package.repository}' package #{package.to_s(:whole)}")
      raise RuntimeError.new 'Build failed'
    end

    return Dir.glob("#{env[:TMP]}/.__packo_build/#{package.name}-#{package.version}*.pko").first
  end

  def _has (package, env)
    !!_search(package.to_s(:whole), package.repository.name, package.repository.type).find {|package|
      !!package.model.data.builds.to_a.find {|build|
        build.features.split(/\s+/).sort == env[:FEATURES].split(/\s+/).sort && \
        build.flavor.split(/\s+/).sort   == env[:FLAVOR].split(/\s+/).sort
      }
    }
  end

  def _filter (package, env)
    env[:FLAVOR] = env[:FLAVOR].split(/\s+/).reject {|f| f == 'binary'}.join(' ')

    features       = _search(package.to_s(:whole), package.repository.name, package.repository.type).first.features
    env[:FEATURES] = env[:FEATURES].split(/\s+/).delete_if {|f|
      !features.member?(f)
    }.join(' ')
  end

  def _digest (package, env)
    _search(package, package.repository.name, :binary).find {|package|
      package.model.data.builds.to_a.find {|build|
        build.features.split(/\s+/).sort == env[:FEATURES].split(/\s+/).sort && \
        build.flavor.split(/\s+/).sort   == env[:FLAVOR].split(/\s+/).sort
      }
    }.model.data.digest
  end

  def _exists? (path)
    InstalledPackage::Content.first(:path => path, :type.not => :dir).package rescue false
  end
end

Application.dispatch
