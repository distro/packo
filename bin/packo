#! /usr/bin/env ruby
# encoding: utf-8
#--
# Copyleft meh. [http://meh.paranoid.pk | meh@paranoici.org]
#
# This file is part of packo.
#
# packo is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# packo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with packo. If not, see <http://www.gnu.org/licenses/>.
#++

require 'shellwords'

def cmd (part)
  part.length > 1 ? part : part.first
end

commands = Dir.glob('/usr/bin/packo-*').map {|path|
  File.basename(path).sub('packo-', '').split('-').map {|part|
    part.to_sym
  }
}

descriptions = {
  :base   => 'Manage packages in the system',
  :files  => 'Manage various informations about package contents',
  :build  => 'Manage packø building system',
  :select => 'Manage various configurations',

  :repository => 'Manage packø repositories',
    [:repository, :remote] => 'Manage remote repositories',

  :env     => 'Manage packø environment',
  :db      => 'Manage packø databases',
  :profile => 'Manage packø profiles',
}

trusted = [:base, :select, :db, :profile, [:repository, :remote]]

commands.each {|command|
  next unless command.map {|p| p.to_s} == ARGV[0 .. command.length - 1]

  ARGV.shift(command.length)

  sandbox  = false
  fakeroot = false

  ENV['PATH'].split(':').each {|folder|
    sandbox  ||= File.executable?("#{folder}/sandbox")
    fakeroot ||= File.executable?("#{folder}/fakeroot")
  }
  
  warn "sandbox isn't installed"  if !sandbox
  warn "fakeroot isn't installed" if !fakeroot

  through = []

  if !trusted.include?(cmd(command))
    through << 'sandbox' if sandbox
  end 
  
  through << 'fakeroot' if fakeroot
  
  through << "packo-#{command.join('-')}"

  ap through

  exit Kernel.system(*(through + ARGV.map {|arg|
    arg.shellescape
  }))
}

require 'packo/cli/base'

class Application < Packo::CLI::Base
  class_option :help, :type => :boolean, :desc => 'Show help usage'

  desc 'version', 'Show current version'
  map '-v' => :version, '--version' => :version
  def version
    puts "packø v. #{Packo.version}"
  end
end

commands.each {|command|
  description = command.length > 1 ?
    descriptions[command] :
    descriptions[command.first]

  Application.class_eval %{
    desc '#{command.join ' '} [ARGUMENTS...]', '#{description}'
    def #{command.join '_'} (*arguments)
    end
  }
}

Application.start(ARGV)
