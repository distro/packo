#! /usr/bin/env ruby
# encoding: utf-8
#--
# Copyleft meh. [http://meh.paranoid.pk | meh@paranoici.org]
#
# This file is part of packo.
#
# packo is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# packo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with packo. If not, see <http://www.gnu.org/licenses/>.
#++

require 'shellwords'

commands = {
	[:base]   => 'Manage packages in the system',
	[:files]  => 'Manage various informations about package contents',
	[:build]  => 'Manage packø building system',
	[:select] => 'Manage various configurations',

	[:virtual] => 'Work directly with virtual repositories',

	[:repository] => 'Manage packø repositories',
		[:repository, :remote] => 'Manage remote repositories',

	[:env]     => 'Manage packø environment',
	[:db]      => 'Manage packø databases',
	[:profile] => 'Manage packø profiles',
}

trusted = [:base, :select, :db, :profile, :virtual]
fake    = [:build]

commands.keys.sort {|a, b|
	b.length <=> a.length
}.each {|command|
	next unless command.map { |p| p.to_s } == ARGV[0 .. command.length - 1]

	ARGV.shift(command.length)

	sandbox    = false
	fakeroot   = false
	executable = false

	ENV['PATH'].split(':').each {|folder|
		sandbox  ||= File.executable?("#{folder}/sandbox")
		fakeroot ||= File.executable?("#{folder}/fakeroot")

		if !executable && File.executable?("#{folder}/packo-#{command.join '-'}")
			executable = "#{folder}/packo-#{command.join '-'}"
		end

		break if sandbox && fakeroot && executable
	}
	
	warn 'sandbox is not installed'  unless sandbox
	warn 'fakeroot is not installed' unless fakeroot
	fail 'no executable found'       unless executable

	through = []

	if !trusted.include?(command.length > 1 ? command : command.first) && sandbox
		through << 'sandbox'

		ARGV.map! {|arg|
			arg.shellescape
		}
	end
	
	if fake.include?(command.length > 1 ? cmmand : command.first) && fakeroot
		through << 'fakeroot'
	end
	
	through << executable

	exit Kernel.system(*(through + ARGV))
}

require 'packo/cli/base'

class Application < Packo::CLI::Base
	class_option :help, :type => :boolean, :desc => 'Show help usage'

	desc 'version', 'Show current version'
	map '-v' => :version, '--version' => :version
	def version
		puts "packø v. #{Packo.version}"
	end
end

commands.each {|command, description|
	next if command.length > 1

	command = command.first

	Application.class_eval {
		desc "#{command} [ARGUMENTS...]", description

		define_method command do end
	}
}

Application.start(ARGV)
