#! /usr/bin/env ruby
# encoding: utf-8
#--
# Copyleft meh. [http://meh.doesntexist.org | meh@paranoici.org]
#
# This file is part of packo.
#
# packo is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# packo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with packo. If not, see <http://www.gnu.org/licenses/>.
#++

require 'optitron'
require 'sqlite3'
require 'open-uri'
require 'nokogiri'

require 'packo'
require 'packo/binary'
require 'packo/models'

class Application < Optitron::CLI
  include Packo::Binary::Helpers
  include Packo::Models

  @@scm = ['git'] # implement others

  desc 'Outputs version'
  def version
    puts "packÃ¸ repository manager #{Packo::Version}"
  end

  desc 'Adds binary/source repositories'
  def add (*uri)
    uri.each {|uri|
      uri  = URI.parse(uri)
      kind = nil
      type = nil
      name = nil

      if uri.scheme.nil? || uri.scheme == 'file'
        kind = :file

        if File.directory? uri.path
          dom = Nokogiri::XML.parse(File.read("#{uri.path}/repository.xml"))
        else
          dom = Nokogiri::XML.parse(File.read(uri.path))
        end

        uri = File.realpath(uri.path)

        type = dom.root['type'].to_sym
        name = dom.root['name']
      elsif ['http', 'https', 'ftp'].member?(uri.scheme)
        kind = :fetched

        xml = open(uri).read
        dom = Nokogiri::XML.parse(xml)

        type = dom.root['type'].to_sym
        name = dom.root['name']
      elsif @@scm.member?(uri.scheme)
        kind = :scm

        FileUtils.rm_rf("#{Packo::Environment[:TMP]}/.__repo", :secure => true)

        _checkout(uri, "#{Packo::Environment[:TMP]}/.__repo")

        dom = Nokogiri::XML.parse(File.read("#{Packo::Environment[:TMP]}/.__repo/repository.xml"))

        type = dom.root['type'].to_sym
        name = dom.root['name']
      end

      if !kind
        fatal "I don't know what to do with #{uri}"
        next
      end

      path = "#{Packo::Environment[:REPOSITORIES]}/#{type}/#{name}"

      if Repository.first(:type => type, :name => name)
        fatal "#{type}/#{name} already exists, delete it first"
        exit! 10
      end

      case type
        when :binary
          path << '.xml'

          FileUtils.mkpath(File.dirname(path))

          file = File.new(path, 'w')
          file.write(open(kind == :file && !uri.to_s.match(/\.xml$/) ? "#{uri}/repository.xml" : uri).read)
          file.close
          
        when :source
          FileUtils.rm_rf path, :secure => true rescue nil
          FileUtils.mkpath path rescue nil

          case kind
            when :fetched
              _checkout(dom.xpath('//address').first.text, path)

            when :scm
              FileUtils.cp_r "#{Packo::Environment[:TMP]}/.__repo/.", path, :preserve => true

            else
              _checkout(uri.to_s, path)
          end
      end

      begin
        _add type, uri, path
        _info "Added #{type}/#{name}"
      rescue Exception => e
        fatal 'Failed to add the cache'
        Packo.debug e, :force => true
      end
    }

    @db.commit rescue nil
  end

  desc 'Deletes installed repositories'
  def delete (*name)
    name.each {|name|
      repository = Repository.parse(name)

      if repository.type && !Repository::Types.member?(repository.type)
        fatal "#{repository.type} is not a valid repository type"
        exit! 20
      end

      conditions        = Hash[:name => repository.name]
      conditions[:type] = repository.type if repository.type

      repositories = Repository.all(conditions)

      if !repositories
        fatal "#{repository.type}/#{repository.name} doesn't exist"
        exit! 21
      end

      _info "Deleting #{[repository.type, repository.name].join('/')}"

      begin
        repositories.each {|repository|
          FileUtils.rm_rf repository.path, :secure => true

          _delete(repository.name, repository.type)
        }
      rescue Exception => e
        fatal "Something went wrong while deleting #{name}"

        Packo.debug e, :force => true
      end
    }
  end

  desc 'Updates installed repositories'
  def update
    Repository.all.each {|repository|
      updated = false

      case repository.type
        when :binary
          if (content = open(repository.uri).read) != File.read(repository.path)
            _delete(repository.name, :binary)
            file = File.new(repository.path, 'w')
            file.write(content)
            file.close
            _add(:binary, repository.uri, repository.path)

            updated = true
          end

        when :source
          if _update(repository.path)
            _delete(repository.name, :source)
            _add(:source, repository.uri, repository.path)

            updated = true
          end

        when :virtual
      end

      if updated
        _info "Updated #{repo['type']}/#{repo['name']}"
      else
        _info "#{repo['type']}/#{repo['name']} already up to date"
      end
    }
  end

  desc 'Searches packages with the given expression'
  opt 'exact', 'Search for the exact name', :type => :boolean, :default => false, :short_name => 'e'
  opt 'full', 'Include the repository that owns the package', :type => :boolean, :default => false
  opt 'type', 'The repository type', :type => :string, :in => ['source', 'binary', 'all'], :default => 'all', :short_name => 't'
  opt 'repository', 'Set a specific repository', :type => :string, :short_name => 'r'
  def search (expression='')
    packages = []

    if params['repository'] && !params['repository'].empty?
      repository      = Repository.parse(params['repository'])
      repository.type = params['type'] if ['source', 'binary'].member?(params['type'])
      repository      = Repository.first(:name => repository.name, :type => repository.type)

      if repository
        packages << repository.search(expression, params['exact'])
      end
    else
      Repository::Types.each {|type|
        if params['type'] == 'all' || params['type'] == type.to_s
          Repository.all(:type => type).each {|repository|
            packages << repository.search(expression, params['exact'])
          }
        end
      }
    end

    packages.flatten.compact.uniq.group_by {|package|
      package.to_s
    }.sort.each {|(name, packages)|
      packages.sort {|a, b|
        a.version <=> b.version
      }.each {|package|
        print "#{package.categories.join('/')}/#{colorize(package.name, :DEFAULT, :DEFAULT, :BOLD)}"
        print "-#{colorize(package.version, :RED)}"
        print "%#{colorize(package.slot, :BLUE, :DEFAULT, :BOLD)}" if package.slot

        print " (#{package.repository.type}/#{package.repository.name} | #{package.repository.uri} | #{package.repository.path})" if params['full']
        print "\n"
      }
    }
  end

  desc 'Searches packages with the given expression and returns detailed informations about them'
  opt 'exact', 'Search for the exact name', :type => :boolean, :default => false, :short_name => 'e'
  opt 'type', 'The repository type', :type => :string, :in => ['source', 'binary', 'all'], :default => 'all', :short_name => 't'
  opt 'repository', 'Set a specific repository', :type => :string, :short_name => 'r'
  def info (expression='')
    packages = []

    if params['repository'] && !params['repository'].empty?
      repository      = Repository.parse(params['repository'])
      repository.type = params['type'] if ['source', 'binary'].member?(params['type'])
      repository      = Repository.first(:name => repository.name, :type => repository.type)

      if repository
        packages << repository.search(expression, params['exact'])
      end
    else
      Repository::Types.each {|type|
        if params['type'] == 'all' || params['type'] == type.to_s
          Repository.all(:type => type).each {|repository|
            packages << repository.search(expression, params['exact'])
          }
        end
      }
    end

    packages.flatten.compact.group_by {|package|
      "#{package['categories']}/#{package['name']}"
    }.sort.each {|(name, packages)|
      packages.sort {|a, b|
        Versionomy.parse(a['version']) <=> Versionomy.parse(b['version'])
      }.each {|package|
        case package.repository.type
          when :binary
            print "[#{colorize("binary/#{package.repository.name}", :BLACK, :DEFAULT, :BOLD)}] "
            print "#{package.categories}/#{colorize(package.name, :DEFAULT, :DEFAULT, :BOLD)}"
            print "-#{colorize(package.version, :RED)}"
            print " (#{colorize(package.slot, :BLUE, :DEFAULT, :BOLD)})" if !package.slot.empty?
            print " {#{colorize(package.revision, :MAGENTA)}}" if package.revision != 0
            print "\n"

            puts "    #{colorize('Description', :GREEN)}: #{package.description}"
            puts "    #{colorize('Homepage', :GREEN)}:    #{package.homepage}"
            puts "    #{colorize('License', :GREEN)}:     #{package.license}"

            puts "    #{colorize('Features', :GREEN)}:    #{package.data.features}"

            print "    #{colorize('Builds', :GREEN)}:      "
            package.data.builds.each {|build|
              print 'With '

              if build.features
                print colorize(build.features, :DEFAULT, :DEFAULT, :BOLD)
              else
                print 'nothing'
              end

              print " in #{colorize(build.flavors, :DEFAULT, :DEFAULT, :BOLD)} flavor" if build.flavors
              print colorize(" (SHA1 #{build.digest})", :BLACK, :DEFAULT, :BOLD) if build.digest
              print "\n                 "
            }

          when :source
            print "[#{colorize("source/#{package.repository.name}", :BLACK, :DEFAULT, :BOLD)}] "
            print "#{package['categories']}/#{colorize(package.name, :DEFAULT, :DEFAULT, :BOLD)}"
            print "-#{colorize(package.version, :RED)}"
            print " (#{colorize(package.slot, :BLUE, :DEFAULT, :BOLD)})" if package.slot
            print "\n"

            puts "    #{colorize('Description', :GREEN)}: #{package.description}"
            puts "    #{colorize('Homepage', :GREEN)}:    #{package.homepage}"
            puts "    #{colorize('License', :GREEN)}:     #{package.license}"

            print "    #{colorize('Features', :GREEN)}:    "

            features = package.data.features
            length   = features.map {|feature| feature['name'].length}.max

            features.each {|feature|
              if feature.enabled
                print "#{colorize(feature.name, :WHITE, :DEFAULT, :BOLD)}#{Packo::Environment[:NO_COLORS] ? '!' : ''}"
              else
                print colorize(feature.name, :BLACK, :DEFAULT, :BOLD)
              end

              print "#{' ' * (4 + length - feature.name.length + (Packo::Environment[:NO_COLORS] && !feature.enabled ? 1 : 0))}#{feature.description || '...'}"

              print "\n                 "
            }
        end

        print "\n"
      }
    }
  end

  desc 'Shows installed repositories'
  def show (type='all')
    if Repository::Types.member?(type.to_sym)
      _info "Installed #{type} repositories:"

      repositories = Repository.all(:type => type)
      length       = repositories.map {|repository| "#{repository.type}/#{repository.name}".length}.max

      repositories.each {|repository|
        puts "  #{repository.type}/#{repository.name}#{' ' * (4 + length - "#{repository.type}/#{repository.name}".length)}#{repository.uri} (#{repository.path})"
      }

      puts ''
    elsif type == 'all'
      Repository::Types.each {|type|
        show(type)
      }
    end
  end

  desc 'Outputs the path of a given repository'
  def path (name)
    repository = Repository.first(:name => name)

    exit! if !repository

    puts repository.path
  end

  desc 'Outputs the URI of a given package'
  def uri (name)
    repository = Repository.first(:name => name)

    exit! if !repository

    case repository.type
      when :binary;  puts repository.data.mirrors.join("\n")
      when :source;  puts repository.data.address
      when :virtual; puts repository.data.address
    end
  end

  desc 'Rehash the repository caches'
  def rehash (*names)
    repositories = []

    if names.empty?
      repositories << Repository.all
    else
      names.each {|name|
        repositories << Repository.all(:name => name)
      }
    end

    ap repositories
    
    repositories.flatten.compact.each {|repo|
      _info "Rehashing #{repo.type}/#{repo.name}"

      ap repo
      
      case repo.type
        when :binary
          _delete(repo.name, :binary)
          _add(:binary, repo.uri, repo.path)

        when :source
          _delete(repo.name, :source)
          _add(:source, repo.uri, repo.path)
      end
    }
  end

  private

  def _add (type, uri, path)
    dom = Nokogiri::XML.parse(File.read(type == :source ? "#{path}/repository.xml" : path))

    repository = Repository.new(
      :type => type,
      :name => dom.root['name'],

      :uri  => uri,
      :path => path
    )
    
    Packo::Binary::Repository.wrap(repository).populate
    
    repository.save
  end

  def _delete (name, type)
    Repository.first(:name => name, :type => type).destroy
  end

  def _checkout (uri, path)
    uri = URI.parse(uri.to_s) if !uri.is_a?(URI)

    if !uri.scheme
      if File.directory?("#{uri}/.git")
        scm = 'git'
      end
    else
      scm = uri.scheme
    end

    if !@@scm.member?(scm)
      fatal "#{scm} is an unsupported SCM"
      exit 40
    end

    case scm
      when 'git'; Packo.sh 'git', 'clone', uri.to_s, path, :silent => !Packo::Environment[:VERBOSE]
    end
  end

  def _update (path)
    result = false

    old = Dir.pwd; Dir.chdir(path)

    if !result && (`git pull`.strip != 'Already up-to-date.' rescue nil)
      result = true
    end

    Dir.chdir(old)

    return result
  end
end

Application.dispatch
