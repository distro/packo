#! /usr/bin/env ruby
# encoding: utf-8
#--
# Copyleft meh. [http://meh.doesntexist.org | meh@paranoici.org]
#
# This file is part of packo.
#
# packo is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# packo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with packo. If not, see <http://www.gnu.org/licenses/>.
#++

require 'optitron'
require 'sqlite3'
require 'open-uri'
require 'rexml/document'

require 'packo'
require 'packo_binary'

class Application < Optitron::CLI
  include PackoBinary::Helpers

  @@scm = ['git'] # implement others

  class_opt 'database', 'The path to the repository cache', :default => Packo::Environment[:REPOSITORY_CACHE]
  class_opt 'source', 'The path to the source cache', :default => Packo::Environment[:SOURCE_CACHE]
  class_opt 'binary', 'The path to the binary cache', :default => Packo::Environment[:BINARY_CACHE]

  desc 'Outputs version'
  def version
    puts "pack√∏ repository manager #{Packo::Version}"
  end

  desc 'Adds binary/source repositories'
  def add (*uri)
    FileUtils.mkpath "#{Packo::Environment[:REPOSITORY_DIRECTORY]}/binary" rescue nil
    FileUtils.mkpath "#{Packo::Environment[:REPOSITORY_DIRECTORY]}/source" rescue nil

    uri.each {|uri|
      uri  = URI.parse(uri)
      type = 'source'
      name = nil

      if uri.scheme.nil? || uri.scheme == 'file'
        if File.directory? uri.path
          dom = REXML::Document.new(File.new("#{uri.path}/repository.xml"))
        else
          dom = REXML::Document.new(File.new(uri.path))
        end

        uri = File.realpath(uri.path)

        type = dom.root.attributes['type'].to_sym
        name = dom.root.attributes['name']
        path = "#{Packo::Environment[:REPOSITORY_DIRECTORY]}/#{type}/#{name}"

        case type
          when :binary
            path << '.xml'

            FileUtils.cp uri, path, :preserve => true

            begin
              @db.execute('INSERT INTO repositories VALUES(?, ?, ?, ?)', [
                name, 'binary', uri, path
              ])
            rescue SQLite3::ConstraintException
              fatal "binary/#{name} already exists, delete it first"
              next
            end
          
          when :source
            FileUtils.rm_rf path, :secure => true rescue nil
            FileUtils.mkpath path rescue nil
            FileUtils.cp_r "#{uri}/.", path, :preserve => true, :remove_destination => true

            begin
              @db.execute('INSERT INTO repositories VALUES(?, ?, ?, ?)', [
                name, 'source', uri, path
              ])
            rescue SQLite3::ConstraintException
              fatal "source/#{name} already exists, delete it first"
              next
            end
        end

        begin
          _add path, type
        rescue Exception => e
          fatal 'Failed to add the cache'
          Packo.debug e, :force => true
        end
      elsif ['http', 'https', 'ftp'].member?(uri.scheme)
        xml = open(uri).read
        dom = REXML::Document.new(xml)

        type = dom.root.attributes['type']
        name = dom.root.attributes['name']
        path = "#{Packo::Environment[:REPOSITORY_DIRECTORY]}/#{type}/#{name}"

        case type
          when 'binary'
            begin
              @db.execute('INSERT INTO repositories VALUES(?, ?, ?, ?)', [
                name, 'binary', uri.to_s, path
              ])
            rescue SQLite3::ConstraintException
              fatal "binary/#{name} already exists, delete it first"
              next
            end

            file = File.new("#{path}.xml", 'w')
            file.write(xml)
            file.close
          
          when 'source'
            uri = dom.elements.each('//address') {}.first.text

            begin
              @db.execute('INSERT INTO repositories VALUES(?, ?, ?, ?)', [
                name, 'source', uri.to_s, path
              ])
            rescue SQLite3::ConstraintException
              fatal "source/#{name} already exists, delete it first"
              next
            end

            _checkout(uri, path)
        end

        begin
          _add path, type.to_sym
        rescue Exception => e
          fatal 'Failed to add the cache'
          Packo.debug e, :force => true
        end
      elsif @@scm.member?(uri.scheme)
        FileUtils.rm_rf("#{Packo::Environment[:TMP]}/.__repo", :secure => true)

        _checkout(uri, "#{Packo::Environment[:TMP]}/.__repo")

        dom = REXML::Document.new(File.new("#{Packo::Environment[:TMP]}/.__repo/repository.xml"))

        type = dom.root.attributes['type']
        name = dom.root.attributes['name']
        path = "#{Packo::Environment[:REPOSITORY_DIRECTORY]}/#{type}/#{name}"

        begin
          @db.execute('INSERT INTO repositories VALUES(?, ?, ?, ?)', [
            name, 'source', uri.to_s, path
          ])
        rescue SQLite3::ConstraintException
          fatal "source/#{name} already exists, delete it first"
          next
        end

        FileUtils.rm_rf path, :secure => true rescue nil
        FileUtils.mkpath path rescue nil
        FileUtils.cp_r "#{Packo::Environment[:TMP]}/.__repo/.", path, :preserve => true, :remove_destination => true

        begin
          _add path, :source
        rescue Exception => e
          fatal 'Failed to add the cache'
          Packo.debug e, :force => true
        end
      end

      _info "Added #{type}/#{name}"
    }

    @db.commit rescue nil
  end

  desc 'Deletes installed repositories'
  def delete (*name)
    name.each {|name|
      type, name = (name.include?('/') ? name : '/' + name).split('/')

      if !type.empty? && type != 'binary' && type != 'source'
        fatal "#{type} is not a valid repository type"
        exit 60
      end

      _info "Deleting #{[type, name].join('/')}"

      begin
        @db.execute(%{
          SELECT *
          
          FROM repositories
          
          WHERE
            name = ?
            #{'AND type = ?' if !type.empty?}
        }, [name, (type.empty? ? nil : type)].compact).each {|repo|
          FileUtils.rm_rf repo['path'], :secure => true

          _delete(name, (type.empty? ? nil : repo['type']))
        }
      rescue Exception => e
        fatal "Something went wrong while deleting #{name}"

        Packo.debug e, :force => true
      end
    }

    @db.commit rescue nil
  end

  desc 'Updates installed repositories'
  def update
    @db.execute('SELECT * FROM repositories').each {|repo|
      _info "Updating #{repo['type']}/#{repo['name']}"
      
      case repo['type']
        when 'binary'
          _delete(repo['name'], :binary)
          file = File.new(repo['path'], 'w')
          file.write(open(repo['uri']).read)
          file.close
          _add(repo['path'], :binary)

        when 'source'
          if _update(repo['path'])
            _delete(repo['name'], :source)
            _add(repo['path'], :source)
          end
      end
    }
  end

  desc 'Searches packages with the given expression'
  opt 'exact', 'Search for the exact name', :type => :boolean, :default => false, :short_name => 'e'
  opt 'full', 'Include the tree that owns the package', :type => :boolean, :default => false
  opt 'type', 'The repository type', :type => :string, :in => ['source', 'binary', 'all'], :default => 'all'
  def search (expression='')
    packages = []

    if params['type'] == 'binary' || params['type'] == 'all'
      PackoBinary::Repository.all(@binary, :binary).each {|tree|
        packages << tree.search(expression, params['exact']).map {|package|
          PackoBinary::Package.new(package['categories'], package['name'], package['version'], package['slot'], tree)
        }
      }
    end

    if params['type'] == 'source' || params['type'] == 'all'
      PackoBinary::Repository.all(@source, :source).each {|tree|
        packages << tree.search(expression, params['exact']).map {|package|
          PackoBinary::Package.new(package['categories'], package['name'], package['version'], package['slot'], tree)
        }
      }
    end

    packages.flatten.uniq.each {|package|
      print package.to_s
      print " (#{package.tree.type}/#{package.tree.name} | #{package.tree.path})" if params['full']

      print "\n"
    }
  end

  desc 'Searches packages with the given expression and returns detailed informations about them'
  opt 'exact', 'Search for the exact name', :type => :boolean, :default => false, :short_name => 'e'
  opt 'type', 'The repository type', :type => :string, :in => ['source', 'binary', 'all'], :default => 'all'
  def info (expression='')
    case params['type']
      when 'binary'
        PackoBinary::Repository.all(@binary, :binary).each {|tree|
          tree.search(expression, params['exact']).each {|package|
            print "#{package['categories']}/#{colorize(package['name'], :DEFAULT, :DEFAULT, :BOLD)}"
            print "-#{colorize(package['version'], :RED)}"
            print " (#{colorize(package['slot'], :BLUE, :DEFAULT, :BOLD)})" if !package['slot'].empty?
            print "\n"

            puts "    #{colorize('Description', :GREEN)}: #{package['description']}"
            puts "    #{colorize('Homepage', :GREEN)}:    #{package['homepage']}"
            puts "    #{colorize('License', :GREEN)}:     #{package['license']}"

            print "    #{colorize('Builds', :GREEN)}:      "

            @binary.execute('SELECT * FROM package_builds WHERE package = ?', package['id']).each {|build|
              print 'With '

              if build['features']
                print colorize(build['features'], :DEFAULT, :DEFAULT, :BOLD)
              else
                print 'nothing'
              end

              print " in #{colorize(build['flavors'], :DEFAULT, :DEFAULT, :BOLD)} flavor" if build['flavors']
              print "\n                 "
            }

            print "\n"
          }
        }

      when 'source'
        PackoBinary::Repository.all(@source, :source).each {|tree|
          tree.search(expression, params['exact']).each {|package|
            print "#{package['categories']}/#{colorize(package['name'], :DEFAULT, :DEFAULT, :BOLD)}"
            print "-#{colorize(package['version'], :RED)}"
            print " (#{colorize(package['slot'], :BLUE, :DEFAULT, :BOLD)})" if !package['slot'].empty?
            print "\n"

            puts "    #{colorize('Description', :GREEN)}: #{package['description']}"
            puts "    #{colorize('Homepage', :GREEN)}:    #{package['homepage']}"
            puts "    #{colorize('License', :GREEN)}:     #{package['license']}"

            print "    #{colorize('Features', :GREEN)}:    "

            features = @source.execute('SELECT * FROM package_features WHERE package = ?', package['id'])
            length   = features.map {|feature| feature['name'].length}.max

            features.each {|feature|
              if feature['enabled'] == 1
                print "#{colorize(feature['name'], :WHITE, :DEFAULT, :BOLD)}#{Packo::Environment[:NO_COLORS] ? '!' : ''}"
              else
                print colorize(feature['name'], :BLACK, :DEFAULT, :BOLD)
              end

              print "#{' ' * (4 + length - feature['name'].length + (Packo::Environment[:NO_COLORS] && feature['enabled'] == 0 ? 1 : 0))}#{feature['description'] || '...'}"

              print "\n                 "
            }

            puts ''
          }
        }

        when 'all'
          params['type'] = 'binary'; info(expression)
          params['type'] = 'source'; info(expression)
    end
  end

  desc 'Shows installed repositories'
  def show (type='all')
    case type
      when 'binary'
        _info 'Installed binary repositories:'

        repositories = @db.execute('SELECT * FROM repositories WHERE type = ?', 'binary')
        length       = repositories.map {|repo| "#{repo['type']}/#{repo['name']}".length}.max

        repositories.each {|repo|
          puts "  #{repo['type']}/#{repo['name']}#{' ' * (4 + length - "#{repo['type']}/#{repo['name']}".length)}#{repo['uri']} (#{repo['path']})"
        }

        puts ''

      when 'source'
        _info 'Installed source repositories:'

        repositories = @db.execute('SELECT * FROM repositories WHERE type = ?', 'source')
        length       = repositories.map {|repo| "#{repo['type']}/#{repo['name']}".length}.max

        repositories.each {|repo|
          puts "  #{repo['type']}/#{repo['name']}#{' ' * (4 + length - "#{repo['type']}/#{repo['name']}".length)}#{repo['uri']} (#{repo['path']})"
        }

        puts ''

      else
        show('binary')
        show('source')
    end
  end

  desc 'Outputs the path of a given repository'
  def path (name)
    type, name = name.split('/')

    begin
      if !['source', 'binary'].member? type
        fatal 'You have to pass the repository type too.'
        exit! 10
      end

      if name
        repositories = @db.execute('SELECT * FROM repositories WHERE name = ? AND type = ?', [name, type])
      else
        repositories = @db.execute('SELECT * FROM repositories WHERE type = ?', type)
      end

      if repositories.empty?
        exit! 11
      end
      
      repositories.each {|repo|
        puts repo['path']
      }
    rescue Exception => e
      fatal "Something went wrong while getting info of #{type}/#{name}"

      Packo.debug e, :force => true
    end
  end

  def params= (params)
    @params = params

    if File.directory? params['database']
      fatal "#{params['database']} is a directory"
      exit 42
    end

    begin
      FileUtils.mkpath(File.dirname(params['database']))
    rescue Exception => e
      fatal "Could not create #{File.dirname(params['database'])}"
      exit 42
    end

    @db = SQLite3::Database.new(params['database'])
    @db.results_as_hash = true

    @db.execute(%{
      CREATE TABLE IF NOT EXISTS repositories (
        name TEXT,
        type TEXT,

        uri  TEXT,
        path TEXT,

        UNIQUE (name, type)
      )
    })

    @source = SQLite3::Database.new(params['source'])
    @source.results_as_hash = true

    @source.execute(%{
      CREATE TABLE IF NOT EXISTS repositories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
  
        name TEXT,
        path TEXT,
  
        UNIQUE (name)
      )
    })
  
    @source.execute(%{
      CREATE TABLE IF NOT EXISTS packages ( 
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        repository INTEGER,

        categories TEXT,
        name       TEXT,
        version    TEXT,
        slot       TEXT,

        description TEXT,
        homepage    TEXT,
        license     TEXT,

        UNIQUE (categories, name, version, slot)
      )
    })

    @source.execute(%{
      CREATE TABLE IF NOT EXISTS package_features (
        package INTEGER,

        name TEXT,
        description TEXT,

        enabled INTEGER,

        UNIQUE (package, name)
      )
    })

    @binary = SQLite3::Database.new(params['binary'])
    @binary.results_as_hash = true

    @binary.execute(%{
      CREATE TABLE IF NOT EXISTS repositories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,

        name TEXT,
        path TEXT,

        UNIQUE (name)
      )
    })

    @binary.execute(%{
      CREATE TABLE IF NOT EXISTS packages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        repository INTEGER,

        categories TEXT,
        name       TEXT,
        version    TEXT,
        slot       TEXT,

        description TEXT,
        homepage    TEXT,
        license     TEXT,

        UNIQUE (categories, name, version, slot)
      )
    })

    @binary.execute(%{
      CREATE TABLE IF NOT EXISTS package_builds (
        package INTEGER,

        features TEXT,
        flavors  TEXT,

        UNIQUE (package, features, flavors)
      )
    })
  end

  private

  def _add (path, type)
    case type.to_sym
      when :binary; PackoBinary::Repository.create(@binary,  REXML::Document.new(File.new(path)), File.realpath(path), type)
      when :source; PackoBinary::Repository.create(@source,  REXML::Document.new(File.new("#{path}/repository.xml")), File.realpath(path), type)
    end.update
  end

  def _delete (name, type)
    PackoBinary::Repository.delete({ :binary => @binary, :source => @source }[type.to_sym], name, type.to_sym)

    type = type.to_s if type

    @db.execute("DELETE FROM repositories WHERE name = ? #{'AND type = ?' if type}", [name, type].compact)
  end

  def _checkout (uri, path)
    uri = URI.parse(uri.to_s) if !uri.is_a?(URI)

    if !@@scm.member?(uri.scheme)
      fatal "#{uri.scheme} is not a supported SCM"
      exit 40
    end

    case uri.scheme
      when 'git'; Packo.sh 'git', 'clone', uri.to_s, path, :silent => !Packo::Environment[:DEBUG]
    end
  end

  def _update (path)
    result = false

    old = Dir.pwd; Dir.chdir(path)

    if !result && (`git pull`.include?('up-to-date') rescue nil)
      result = true
    end

    Dir.chdir(old)

    return result
  end
end

Application.dispatch
