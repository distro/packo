#! /usr/bin/env ruby
# encoding: utf-8
#--
# Copyleft meh. [http://meh.doesntexist.org | meh@paranoici.org]
#
# This file is part of packo.
#
# packo is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# packo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with packo. If not, see <http://www.gnu.org/licenses/>.
#++

require 'optitron'
require 'sqlite3'
require 'open-uri'
require 'rexml/document'

require 'packo'
require 'packo_binary'

class Application < Optitron::CLI
  include PackoBinary::Helpers

  @@scm = ['git'] # implement others

  class_opt 'database', 'The path to the repository cache', :default => Packo::Environment[:REPOSITORY_CACHE]

  desc 'Outputs version'
  def version
    puts "packÃ¸ repository manager #{Packo::Version}"
  end

  desc 'Adds binary/source repositories'
  def add (*uri)
    FileUtils.mkpath "#{Packo::Environment[:REPOSITORY_DIRECTORY]}/binary" rescue nil
    FileUtils.mkpath "#{Packo::Environment[:REPOSITORY_DIRECTORY]}/source" rescue nil

    uri.each {|uri|
      uri  = URI.parse(uri)
      kind = nil
      type = nil
      name = nil

      if uri.scheme.nil? || uri.scheme == 'file'
        kind = :file

        if File.directory? uri.path
          dom = REXML::Document.new(File.read("#{uri.path}/repository.xml"))
        else
          dom = REXML::Document.new(File.read(uri.path))
        end

        uri = File.realpath(uri.path)

        type = dom.root.attributes['type'].to_sym
        name = dom.root.attributes['name']
      elsif ['http', 'https', 'ftp'].member?(uri.scheme)
        kind = :fetched

        xml = open(uri).read
        dom = REXML::Document.new(xml)

        type = dom.root.attributes['type']
        name = dom.root.attributes['name']
      elsif @@scm.member?(uri.scheme)
        kind = :scm

        FileUtils.rm_rf("#{Packo::Environment[:TMP]}/.__repo", :secure => true)

        _checkout(uri, "#{Packo::Environment[:TMP]}/.__repo")

        dom = REXML::Document.new(File.read("#{Packo::Environment[:TMP]}/.__repo/repository.xml"))

        type = dom.root.attributes['type']
        name = dom.root.attributes['name']
      end

      if !kind
        fatal "I don't know what to do with #{uri}"
        next
      end

      path = "#{Packo::Environment[:REPOSITORY_DIRECTORY]}/#{type}/#{name}"

      if @db.execute('SELECT id FROM repositories WHERE name = ? AND type = ?', [name, type.to_s]).length > 0
        fatal "#{type}/#{name} already exists, delete it first"
        next
      end

      case type
        when :binary
          path << '.xml'

          file = File.new(path, 'w')
          file.write(open(kind == :file && !uri.to_s.match(/\.xml$/) ? "#{uri}/repository.xml" : uri).read)
          file.close
          
        when :source
          FileUtils.rm_rf path, :secure => true rescue nil
          FileUtils.mkpath path rescue nil

          target = case kind
            when :fetched; dom.elements.each('//address') {}.first.text
            when :scm;     "#{Packo::Environment[:TMP]}/.__repo/"
            else;          uri.to_s
          end

          _checkout(target, path)
      end

      begin
        _add type, uri, path
        _info "Added #{type}/#{name}"
      rescue Exception => e
        fatal 'Failed to add the cache'
        Packo.debug e, :force => true
      end
    }

    @db.commit rescue nil
  end

  desc 'Deletes installed repositories'
  def delete (*name)
    name.each {|name|
      repository = PackoBinary::Repository.parse(name)

      if repository.type && !['binary', 'source'].member?(repository.type)
        fatal "#{type} is not a valid repository type"
        exit 60
      end

      _info "Deleting #{[repository.type, repository.namename].join('/')}"

      begin
        @db.execute("SELECT * FROM repositories WHERE name = ? #{'AND type = ?' if repository.type}", [
          repository.name, repository.type
        ].compact).each {|repo|
          FileUtils.rm_rf repo['path'], :secure => true

          _delete(repo['name'], repo['type'])
        }
      rescue Exception => e
        fatal "Something went wrong while deleting #{name}"

        Packo.debug e, :force => true
      end
    }

    @db.commit rescue nil
  end

  desc 'Updates installed repositories'
  def update
    @db.execute('SELECT * FROM repositories').each {|repo|
      _info "Updating #{repo['type']}/#{repo['name']}"
      
      case repo['type'].to_sym
        when :binary
          _delete(repo['name'], :binary)
          file = File.new(repo['path'], 'w')
          file.write(open(repo['uri']).read)
          file.close
          _add(:binary, repo['uri'], repo['path'])

        when :source
          if _update(repo['path'])
            _delete(repo['name'], :source)
            _add(:source, repo['uri'], repo['path'])
          end
      end
    }
  end

  desc 'Searches packages with the given expression'
  opt 'exact', 'Search for the exact name', :type => :boolean, :default => false, :short_name => 'e'
  opt 'full', 'Include the repository that owns the package', :type => :boolean, :default => false
  opt 'type', 'The repository type', :type => :string, :in => ['source', 'binary', 'all'], :default => 'all', :short_name => 't'
  opt 'repository', 'Set a specific repository', :type => :string, :short_name => 'r'
  def search (expression='')
    packages = []

    if params['repository'] && !params['repository'].empty?
      repository      = PackoBinary::Repository.parse(params['repository'])
      repository.type = params['type'] if ['source', 'binary'].member?(params['type'])
      repository      = PackoBinary::Repository.find(@db, repository.name, repository.type)

      if repository
        packages << repository.search(expression, params['exact']).map {|package|
          PackoBinary::Package.new(package['categories'], package['name'], package['version'], package['slot'], repository)
        }
      end
    else
      [:binary, :source].each {|type|
        if params['type'] == 'all' || params['type'] == type.to_s
          PackoBinary::Repository.all(@db, type.to_s).each {|repository|
            packages << repository.search(expression, params['exact']).map {|package|
              PackoBinary::Package.new(package['categories'], package['name'], package['version'], package['slot'], repository)
            }
          }
        end
      }
    end

    packages.flatten.compact.uniq.group_by {|package|
      package.to_s
    }.sort.each {|(name, packages)|
      packages.sort {|a, b|
        a.version <=> b.version
      }.each {|package|
        print package.to_s
        print " (#{package.repository.type}/#{package.repository.name} | #{package.repository.uri} | #{package.repository.path})" if params['full']
        print "\n"
      }
    }
  end

  desc 'Searches packages with the given expression and returns detailed informations about them'
  opt 'exact', 'Search for the exact name', :type => :boolean, :default => false, :short_name => 'e'
  opt 'type', 'The repository type', :type => :string, :in => ['source', 'binary', 'all'], :default => 'all', :short_name => 't'
  opt 'repository', 'Set a specific repository', :type => :string, :short_name => 'r'
  def info (expression='')
    packages = []

    if params['repository'] && !params['repository'].empty?
      repository      = PackoBinary::Repository.parse(params['repository'])
      repository.type = params['type'] if ['source', 'binary'].member?(params['type'])
      repository      = PackoBinary::Repository.find(@db, repository.name, repository.type)

      if repository
        packages << repository.search(expression, params['exact']).map {|package|
          package[:type] = repository.type; package
        }
      end
    else
      [:binary, :source].each {|type|
        if params['type'] == 'all' || params['type'] == type.to_s
          PackoBinary::Repository.all(@db, type.to_s).each {|repository|
            packages << repository.search(expression, params['exact']).map {|package|
              package[:type] = type; package
            }
          }
        end
      }
    end

    packages.flatten.compact.group_by {|package|
      "#{package['categories']}/#{package['name']}"
    }.sort.each {|(name, packages)|
      packages.sort {|a, b|
        Versionomy.parse(a['version']) <=> Versionomy.parse(b['version'])
      }.each {|package|
        case package[:type]
          when :binary
            print "#{package['categories']}/#{colorize(package['name'], :DEFAULT, :DEFAULT, :BOLD)}"
            print "-#{colorize(package['version'], :RED)}"
            print " (#{colorize(package['slot'], :BLUE, :DEFAULT, :BOLD)})" if !package['slot'].empty?
            print "\n"

            puts "    #{colorize('Description', :GREEN)}: #{package['description']}"
            puts "    #{colorize('Homepage', :GREEN)}:    #{package['homepage']}"
            puts "    #{colorize('License', :GREEN)}:     #{package['license']}"

            print "    #{colorize('Features', :GREEN)}:    "
            @db.execute('SELECT * FROM binary_features WHERE package = ?', package['id']).each {|version|
              print version['features']
            }
            print "\n"

            print "    #{colorize('Builds', :GREEN)}:      "
            @db.execute('SELECT * FROM binary_builds WHERE package = ?', package['id']).each {|build|
              print 'With '

              if build['features']
                print colorize(build['features'], :DEFAULT, :DEFAULT, :BOLD)
              else
                print 'nothing'
              end

              print " in #{colorize(build['flavors'], :DEFAULT, :DEFAULT, :BOLD)} flavor" if build['flavors']
              print colorize(" (SHA1 #{build['digest']})", :BLACK, :DEFAULT, :BOLD) if build['digest']
              print "\n                 "
            }

          when :source
            print "#{package['categories']}/#{colorize(package['name'], :DEFAULT, :DEFAULT, :BOLD)}"
            print "-#{colorize(package['version'], :RED)}"
            print " (#{colorize(package['slot'], :BLUE, :DEFAULT, :BOLD)})" if !package['slot'].empty?
            print "\n"

            puts "    #{colorize('Description', :GREEN)}: #{package['description']}"
            puts "    #{colorize('Homepage', :GREEN)}:    #{package['homepage']}"
            puts "    #{colorize('License', :GREEN)}:     #{package['license']}"

            print "    #{colorize('Features', :GREEN)}:    "

            features = @db.execute('SELECT * FROM source_features WHERE package = ?', package['id'])
            length   = features.map {|feature| feature['name'].length}.max

            features.each {|feature|
              if feature['enabled'] == 1
                print "#{colorize(feature['name'], :WHITE, :DEFAULT, :BOLD)}#{Packo::Environment[:NO_COLORS] ? '!' : ''}"
              else
                print colorize(feature['name'], :BLACK, :DEFAULT, :BOLD)
              end

              print "#{' ' * (4 + length - feature['name'].length + (Packo::Environment[:NO_COLORS] && feature['enabled'] == 0 ? 1 : 0))}#{feature['description'] || '...'}"

              print "\n                 "
            }
        end

        print "\n"
      }
    }
  end

  desc 'Shows installed repositories'
  def show (type='all')
    if type == 'binary' || type == 'source'
      _info "Installed #{type} repositories:"

      repositories = @db.execute('SELECT * FROM repositories WHERE type = ?', type)
      length       = repositories.map {|repo| "#{repo['type']}/#{repo['name']}".length}.max

      repositories.each {|repo|
        puts "  #{repo['type']}/#{repo['name']}#{' ' * (4 + length - "#{repo['type']}/#{repo['name']}".length)}#{repo['uri']} (#{repo['path']})"
      }

      puts ''
    elsif type == 'all'
      show('binary')
      show('source')
    end
  end

  desc 'Outputs the path of a given repository'
  def path (name)
    repository = PackoBinary::Repository.find(@db, name)

    exit! if !repository

    puts repository.path
  end

  desc 'Outputs the URI of a given package'
  def uri (name)
    repository = PackoBinary::Repository.find(@db, name)

    exit! if !repository

    case repository.type
      when :binary; puts repository.mirrors.join("\n")
      when :source; puts repository.uri
    end
  end

  desc 'Rehash the repository caches'
  def rehash (*names)
    repositories = []

    if names.empty?
      repositories << PackoBinary::Repository.all(@db)
    else
      names.each {|name|
        repositories << PackoBinary::Repository.find(@db, name)
      }
    end
    
    repositories.flatten.compact.each {|repo|
      _info "Rehashing #{repo['type']}/#{repo['name']}"
      
      case repo['type']
        when 'binary'
          _delete(repo['name'], :binary)
          _add(repo['path'], :binary)

        when 'source'
          _delete(repo['name'], :source)
          _add(repo['path'], :source)
      end
    }
  end

  def params= (params)
    @params = params

    if File.directory? params['database']
      fatal "#{params['database']} is a directory"
      exit 42
    end

    begin
      FileUtils.mkpath(File.dirname(params['database']))
    rescue Exception => e
      fatal "Could not create #{File.dirname(params['database'])}"
      exit 42
    end

    @db = SQLite3::Database.new(params['database'])
    @db.results_as_hash = true

    @db.execute(%{
      CREATE TABLE IF NOT EXISTS repositories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,

        name TEXT,
        type TEXT,

        uri  TEXT,
        path TEXT,

        UNIQUE (name, type)
      )
    })

    @db.execute(%{
      CREATE TABLE IF NOT EXISTS packages ( 
        id         INTEGER PRIMARY KEY AUTOINCREMENT,
        repository INTEGER,

        categories TEXT,
        name       TEXT,
        version    TEXT,
        slot       TEXT,

        description TEXT,
        homepage    TEXT,
        license     TEXT,

        UNIQUE (repository, categories, name, version, slot)
      )
    })

    @db.execute(%{
      CREATE TABLE IF NOT EXISTS source_features (
        package INTEGER,

        name        TEXT,
        description TEXT,

        enabled INTEGER,

        UNIQUE (package, name)
      )
    })

    @db.execute(%{
      CREATE TABLE IF NOT EXISTS binary_mirrors (
        repository INTEGER,
        uri        TEXT,

        UNIQUE (repository, uri)
      )
    })

    @db.execute(%{
      CREATE TABLE IF NOT EXISTS binary_features (
        package INTEGER,

        features TEXT,

        UNIQUE (package, features)
      )
    })

    @db.execute(%{
      CREATE TABLE IF NOT EXISTS binary_builds (
        package INTEGER,

        features TEXT,
        flavors  TEXT,

        digest TEXT,

        UNIQUE (package, features, flavors, digest)
      )
    })
  end

  private

  def _add (type, uri, path)
    PackoBinary::Repository.create(@db, type, REXML::Document.new(File.read(type == :source ? "#{path}/repository.xml" : path)), uri, File.realpath(path)).update
  end

  def _delete (name, type)
    PackoBinary::Repository.delete(@db, name, type.to_sym)
  end

  def _checkout (uri, path)
    uri = URI.parse(uri.to_s) if !uri.is_a?(URI)

    if !uri.scheme
      if File.directory?("#{uri}/.git")
        scm = 'git'
      end
    else
      scm = uri.scheme
    end

    if !@@scm.member?(scm)
      fatal "#{scm} is an unsupported SCM"
      exit 40
    end

    case scm
      when 'git'; Packo.sh 'git', 'clone', uri.to_s, path, :silent => !Packo::Environment[:VERBOSE]
    end
  end

  def _update (path)
    result = false

    old = Dir.pwd; Dir.chdir(path)

    if !result && (`git pull`.strip == 'Already up-to-date.' rescue nil)
      result = true
    end

    Dir.chdir(old)

    return result
  end
end

Application.dispatch
