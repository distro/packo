#! /usr/bin/env ruby
# encoding: utf-8
#--
# Copyleft meh. [http://meh.doesntexist.org | meh@paranoici.org]
#
# This file is part of packo.
#
# packo is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# packo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with packo. If not, see <http://www.gnu.org/licenses/>.
#++

require 'optitron'

require 'packo'
require 'packo/binary/helpers'

class Application < Optitron::CLI
  include Packo
  include Binary::Helpers
  include Models

  desc 'Output version'
  def version
    puts "packÃ¸ selection tool #{Packo::VERSION}"
  end

  desc 'Show current selection modules'
  def show
    selectors = Selector.all

    length = selectors.map {|s| s.name.length}.max
    
    selectors.each {|selector|
      info "#{selector.name}#{' ' * (4 + length - selector.name.length)}#{selector.description}"
    }
  end

  desc 'Add a module to the database'
  def add (name, description, path)
    Selector.first_or_create(:name => name).update(:description => description, :path => path)

    info "#{name} added"
  end

  desc 'Delete a module from the database'
  def delete (name)
    selector = Selector.first(:name => name)
    
    if !selector
      fatal "#{name} doesn't exist"
      exit! 30
    end
    
    selector.destroy

    info "#{name} deleted"
  end

  def command_missing (command, *args)
    cmd = Selector.first(:name => command).path rescue nil

    if !cmd || !File.exists?(cmd)
      fatal "#{command} not found"
      exit 1
    end

    args.each {|arg|
      cmd << %Q{ "#{arg}"}
    }

    system(cmd)
  end

  private

  def initialize
    @env = Environment.new
  end
end

Application.dispatch
